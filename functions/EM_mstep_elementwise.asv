function [package]=EM_mstep_elementwise(X, package,p_idx,out_idx)
    [M,N]=size(X);
    [U,D,V]=svd(X(:,out_idx));
    package.rank_q(p_idx)=find_rank(diag(D));
    if package.rank_q(p_idx)>4
        package.rank_q(p_idx)=4;
    end
    package.U_mat{p_idx}=U(:,1:package.rank_q(p_idx));
    package.D_mat{p_idx}=D(1:package.rank_q(p_idx),1:package.rank_q(p_idx));
    package.V_mat{p_idx}=V(:,1:package.rank_q(p_idx));
    package.Ut_mat{p_idx}=eye(package.rank_q(p_idx),package.rank_q(p_idx));
    package.Vt_mat{p_idx}=eye(package.rank_q(p_idx),package.rank_q(p_idx));
    package.in_table{p_idx}=out_idx';
    package.W_mat{p_idx}=U;
%     package.clusters=zeros(1,N);
    package.clusters(out_idx)=p_idx;

    %mean update
    R_tmp=zeros(N,1);
    R_tmp(out_idx)=1;
    package.m_value{p_idx}=(R_tmp'*(U'*X)')'/sum(R_tmp);
    %covariance update
    S=zeros(M,M);
    for iter2=1:N
        S=S+R_tmp(iter2)*(U'*X(:,iter2)-package.m_value{p_idx})*(U'*X(:,iter2)-package.m_value{p_idx})';
    end
    package.cov{p_idx}=S/(sum(R_tmp));
    package.cov{p_idx}=package.cov{p_idx}+eye(size(package.cov{p_idx}))*10^(-300);
    C=package.cov{p_idx}(package.rank_q+1:end,package.rank_q+1:end);
    package.e_criteria(p_idx)=norm(C)/length(C);
    package.R(:,p_idx)=R_tmp;
    package.P_c(p_idx)=sum(R_tmp)
end