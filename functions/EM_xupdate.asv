function [X,neighbors,em_pack,occ_idx,T_mat,X_candi]=EM_xupdate(em_pack,X,neighbors,dataMatrix)

    group_num=numel(em_pack.rank_q);
    k=4;
    [~,N]=size(X);
    n=size(dataMatrix,1)/3;
    p_idx=n;
    
    ransacCoef.minPtNum=4;
    ransacCoef.iterNum=100;
    ransacCoef.thInlrRatio=0.3;
    ransacCoef.thDist=0.05;
                
    tree=kdtree_build(dataMatrix(3*(p_idx-1)+1:3*p_idx,:)');%create kd tree
    T_mat=cell(1,group_num);
    occ_idx=zeros(N,1);
    X_candi=repmat(X(end-2:end,:),group_num,1);
    for g_idx=1:group_num
        
        clust_idx=find(em_pack.clusters==g_idx);
        sampled_N=length(clust_idx);
        
        if length(clust_idx)>10
                [corr,~]=kdtree_nearest_neighbor(tree,X(end-2*k+1:end-k-1,clust_idx)');
%                 matching=zeros(1,sampled_N);
%                 for iter=1:sampled_N
%                     [m_idx,~]=kdtree_nearest_neighbor(tree,X(end-2*k+1:end-k-1,clust_idx(iter))');
%                     matching(iter)=m_idx;
%                 end

                %correspondence propagation
%                 no_idx=find(em_pack.clusters==g_idx);
                length(clust_idx)
                % update neighbors
                x_tmp=X(k*(p_idx-1)+1:k*p_idx-1,clust_idx);
%                 corr=matching;

                T_mat{g_idx}=eye(4);
                for iter=1:3
                    [T, ~, ~, corr] = ransac2( x_tmp,dataMatrix(3*(p_idx-1)+1:3*p_idx,corr),tree,dataMatrix(3*(p_idx-1)+1:3*p_idx,:),ransacCoef,@estimateRigidTransform,@estimateDistance);
                    T_mat{g_idx}=T*T_mat{g_idx};
                    % update X
                    x_tmp=T*[x_tmp;ones(1,length(clust_idx))];
                    x_tmp=x_tmp(1:3,:);
                end
                temp_X=T_mat{g_idx}*[X(k*(p_idx-1)+1:k*p_idx-1,:);ones(1,N)];
                
                % save X_nn
                [corr,dist]=kdtree_nearest_neighbor(tree,temp_X(1:3,:)');
                neighbors(p_idx,clust_idx)=corr(clust_idx);
                em_pack.dists(g_idx)=mean(dist(clust_idx));
                X_candi(k*(g_idx-1)+1:k*g_idx-1,:)=dataMatrix(3*(p_idx-1)+1:3*p_idx,corr);
        else
            T_mat{g_idx}=eye(4);
        end

    end

    %determine
    X(k*p_idx+1:k*p_idx+3,:)=dataMatrix(3*(p_idx-1)+1:3*p_idx,neighbors(p_idx,:));
    
    %find occluded region
    for iter=1:N
        n_idx=neighbors(end,iter);
        if sum(neighbors(end,:)==n_idx)>1
            occ_idx(iter)=1;
        end
    end

    kdtree_delete(tree);
end